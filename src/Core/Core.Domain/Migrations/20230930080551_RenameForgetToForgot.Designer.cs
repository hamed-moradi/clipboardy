// <auto-generated />
using System;
using Core.Domain._App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Domain.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20230930080551_RenameForgetToForgot")]
    partial class RenameForgetToForgot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("expireDateForgotPasswordResetToken")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("forgotPasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("inserted_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("last_signedin_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("password")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Core.Domain.Entities.AccountDevice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<string>("device_key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("device_name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("device_type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("inserted_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("account_id");

                    b.ToTable("account_device");
                });

            modelBuilder.Entity("Core.Domain.Entities.AccountProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("inserted_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("linked_key")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("profile_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("ACTIVE");

                    b.HasKey("id");

                    b.HasIndex("account_id", "linked_key")
                        .IsUnique();

                    b.ToTable("account_profile");
                });

            modelBuilder.Entity("Core.Domain.Entities.Clipboard", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("device_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("inserted_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("ACTIVE");

                    b.Property<int>("type_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("account_id");

                    b.HasIndex("device_id");

                    b.HasIndex("type_id");

                    b.ToTable("clipboard");
                });

            modelBuilder.Entity("Core.Domain.Entities.ContentType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("extension")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("mime_type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("id");

                    b.HasIndex("extension")
                        .IsUnique();

                    b.ToTable("content_type");

                    b.HasData(
                        new
                        {
                            id = 1,
                            extension = ".aac",
                            mimetype = "audio/aac",
                            name = "AAC audio"
                        },
                        new
                        {
                            id = 2,
                            extension = ".abw",
                            mimetype = "application/x-abiword",
                            name = "AbiWord document"
                        },
                        new
                        {
                            id = 3,
                            extension = ".arc",
                            mimetype = "application/x-freearc",
                            name = "Archive document (multiple files embedded)"
                        },
                        new
                        {
                            id = 4,
                            extension = ".avif",
                            mimetype = "image/avif",
                            name = "AVIF image"
                        },
                        new
                        {
                            id = 5,
                            extension = ".avi",
                            mimetype = "video/x-msvideo",
                            name = "AVI: Audio Video Interleave"
                        },
                        new
                        {
                            id = 6,
                            extension = ".azw",
                            mimetype = "application/vnd.amazon.ebook",
                            name = "Amazon Kindle eBook format"
                        },
                        new
                        {
                            id = 7,
                            extension = ".bin",
                            mimetype = "application/octet-stream",
                            name = "Any kind of binary data"
                        },
                        new
                        {
                            id = 8,
                            extension = ".bmp",
                            mimetype = "image/bmp",
                            name = "Windows OS/2 Bitmap Graphics"
                        },
                        new
                        {
                            id = 9,
                            extension = ".csh",
                            mimetype = "application/x-csh",
                            name = "C-Shell script"
                        },
                        new
                        {
                            id = 10,
                            extension = ".css",
                            mimetype = "text/css",
                            name = "Cascading Style Sheets (CSS)"
                        },
                        new
                        {
                            id = 11,
                            extension = ".csv ",
                            mimetype = "text/csv",
                            name = "Comma - separated values(CSV)"
                        },
                        new
                        {
                            id = 12,
                            extension = ".doc ",
                            mimetype = "application/msword",
                            name = "Microsoft Word"
                        },
                        new
                        {
                            id = 13,
                            extension = ".docx",
                            mimetype = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            name = "Microsoft Word (OpenXML)"
                        },
                        new
                        {
                            id = 14,
                            extension = ".eot ",
                            mimetype = "application/vnd.ms-fontobject",
                            name = "MS Embedded OpenType fonts"
                        },
                        new
                        {
                            id = 15,
                            extension = ".epub",
                            mimetype = "application/epub+zip",
                            name = "Electronic publication (EPUB)"
                        },
                        new
                        {
                            id = 16,
                            extension = ".gz",
                            mimetype = "application/gzip",
                            name = "GZip Compressed Archive"
                        },
                        new
                        {
                            id = 17,
                            extension = ".gif",
                            mimetype = "image/gif",
                            name = "Graphics Interchange Format (GIF)"
                        },
                        new
                        {
                            id = 18,
                            extension = ".ht",
                            mimetype = "text/html",
                            name = "HyperText Markup Language (HTML)"
                        },
                        new
                        {
                            id = 19,
                            extension = ".ico ",
                            mimetype = "image/vnd.microsoft.icon",
                            name = "Icon format"
                        },
                        new
                        {
                            id = 20,
                            extension = ".ics",
                            mimetype = "text/calendar",
                            name = "iCalendar format"
                        },
                        new
                        {
                            id = 21,
                            extension = ".jar",
                            mimetype = "application/java-archive",
                            name = "Java Archive (JAR)"
                        },
                        new
                        {
                            id = 22,
                            extension = ".jpe",
                            mimetype = "image/jpeg",
                            name = "JPEG images"
                        },
                        new
                        {
                            id = 23,
                            extension = ".js",
                            mimetype = "text/javascript",
                            name = "JavaScript"
                        },
                        new
                        {
                            id = 24,
                            extension = ".json",
                            mimetype = "application/json",
                            name = "JSON format"
                        },
                        new
                        {
                            id = 25,
                            extension = ".jsonld",
                            mimetype = "application/ld+json",
                            name = "JSON-LD format"
                        },
                        new
                        {
                            id = 26,
                            extension = ".mi",
                            mimetype = "audio/midi",
                            name = "Musical Instrument Digital Interface (MIDI)"
                        },
                        new
                        {
                            id = 27,
                            extension = ".midi",
                            mimetype = "audio/x-midi",
                            name = "Musical Instrument Digital Interface (MIDI)"
                        },
                        new
                        {
                            id = 28,
                            extension = ".mjs ",
                            mimetype = "text/javascript",
                            name = "JavaScript module"
                        },
                        new
                        {
                            id = 29,
                            extension = ".mp3",
                            mimetype = "audio/mpeg",
                            name = "MP3 audio"
                        },
                        new
                        {
                            id = 30,
                            extension = ".mp4",
                            mimetype = "video/mp4",
                            name = "MP4 video"
                        },
                        new
                        {
                            id = 31,
                            extension = ".mpeg",
                            mimetype = "video/mpeg",
                            name = "MPEG Video"
                        },
                        new
                        {
                            id = 32,
                            extension = ".mpkg",
                            mimetype = "application/vnd.apple.installer+xml",
                            name = "Apple Installer Package"
                        },
                        new
                        {
                            id = 33,
                            extension = ".odp",
                            mimetype = "application/vnd.oasis.opendocument.presentation",
                            name = "OpenDocument presentation document"
                        },
                        new
                        {
                            id = 34,
                            extension = ".ods",
                            mimetype = "application/vnd.oasis.opendocument.spreadsheet",
                            name = "OpenDocument spreadsheet document"
                        },
                        new
                        {
                            id = 35,
                            extension = ".odt",
                            mimetype = "application/vnd.oasis.opendocument.text",
                            name = "OpenDocument text document"
                        },
                        new
                        {
                            id = 36,
                            extension = ".oga",
                            mimetype = "audio/ogg",
                            name = "OGG audio"
                        },
                        new
                        {
                            id = 37,
                            extension = ".ogv",
                            mimetype = "video/ogg",
                            name = "OGG video"
                        },
                        new
                        {
                            id = 38,
                            extension = ".ogx",
                            mimetype = "application/ogg",
                            name = "OGG"
                        },
                        new
                        {
                            id = 39,
                            extension = ".opus",
                            mimetype = "audio/opus",
                            name = "Opus audio"
                        },
                        new
                        {
                            id = 40,
                            extension = ".otf",
                            mimetype = "font/otf",
                            name = "OpenType font"
                        },
                        new
                        {
                            id = 41,
                            extension = ".png",
                            mimetype = "image/png",
                            name = "Portable Network Graphics"
                        },
                        new
                        {
                            id = 42,
                            extension = ".pdf",
                            mimetype = "application/vnd.apple.installer+xml",
                            name = "Apple Installer Package"
                        },
                        new
                        {
                            id = 43,
                            extension = ".php ",
                            mimetype = "application/vnd.oasis.opendocument.text",
                            name = "OpenDocument text document"
                        },
                        new
                        {
                            id = 44,
                            extension = ".ppt ",
                            mimetype = "audio/ogg",
                            name = "OGG audio"
                        },
                        new
                        {
                            id = 45,
                            extension = ".pptx",
                            mimetype = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                            name = "Microsoft PowerPoint (OpenXML)"
                        },
                        new
                        {
                            id = 46,
                            extension = ".rar ",
                            mimetype = "application/vnd.rar",
                            name = "RAR archive"
                        },
                        new
                        {
                            id = 47,
                            extension = ".rtf",
                            mimetype = "application/rtf",
                            name = "Rich Text Format (RTF)"
                        },
                        new
                        {
                            id = 48,
                            extension = ".sh",
                            mimetype = "application/x-sh",
                            name = "Bourne shell script"
                        },
                        new
                        {
                            id = 49,
                            extension = ".svg",
                            mimetype = "image/svg+xml",
                            name = "Scalable Vector Graphics (SVG)"
                        },
                        new
                        {
                            id = 50,
                            extension = ".tar ",
                            mimetype = "application/x-tar",
                            name = "Tape Archive(TAR)"
                        },
                        new
                        {
                            id = 51,
                            extension = ".ti",
                            mimetype = "image/tiff",
                            name = "Tagged Image File Format (TIFF)"
                        },
                        new
                        {
                            id = 52,
                            extension = ".ts",
                            mimetype = "video/mp2t",
                            name = "MPEG transport stream"
                        },
                        new
                        {
                            id = 53,
                            extension = ".ttf",
                            mimetype = "font/ttf",
                            name = "TrueType Font"
                        },
                        new
                        {
                            id = 54,
                            extension = ".txt",
                            mimetype = "text/plain",
                            name = "Text, (generally ASCII or ISO 8859 - n)"
                        },
                        new
                        {
                            id = 55,
                            extension = ".vsd",
                            mimetype = "application/vnd.visio",
                            name = "Microsoft Visio"
                        },
                        new
                        {
                            id = 56,
                            extension = ".wav",
                            mimetype = "audio/wav",
                            name = "Waveform Audio Format"
                        },
                        new
                        {
                            id = 57,
                            extension = ".weba",
                            mimetype = "audio/webm",
                            name = "WEBM audio"
                        },
                        new
                        {
                            id = 58,
                            extension = ".webm",
                            mimetype = "video/webm",
                            name = "WEBM video"
                        },
                        new
                        {
                            id = 59,
                            extension = ".webp",
                            mimetype = "image/webp",
                            name = "WEBP image"
                        },
                        new
                        {
                            id = 60,
                            extension = ".woff",
                            mimetype = "font/woff",
                            name = "Web Open Font Format (WOFF)"
                        },
                        new
                        {
                            id = 61,
                            extension = ".woff2 ",
                            mimetype = "font/woff2",
                            name = "Web Open Font Format (WOFF)"
                        },
                        new
                        {
                            id = 62,
                            extension = ".xhtml ",
                            mimetype = "application/xhtml+xml",
                            name = "XHTML"
                        },
                        new
                        {
                            id = 63,
                            extension = ".xls",
                            mimetype = "application/vnd.ms-excel",
                            name = "Microsoft Excel"
                        },
                        new
                        {
                            id = 64,
                            extension = ".xlsx",
                            mimetype = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            name = "Microsoft Excel (OpenXML)"
                        },
                        new
                        {
                            id = 65,
                            extension = ".xml ",
                            mimetype = "application/xml",
                            name = "XML"
                        },
                        new
                        {
                            id = 66,
                            extension = ".xul",
                            mimetype = "application/vnd.mozilla.xul+xml",
                            name = "XUL"
                        },
                        new
                        {
                            id = 67,
                            extension = ".zip",
                            mimetype = "application/zip",
                            name = "ZIP archive"
                        },
                        new
                        {
                            id = 68,
                            extension = ".7z",
                            mimetype = "application/x-7z-compressed",
                            name = "7-zip archive"
                        },
                        new
                        {
                            id = 69,
                            extension = ".htm",
                            mimetype = "text/html",
                            name = "HyperText Markup Language (HTML)"
                        },
                        new
                        {
                            id = 70,
                            extension = ".html",
                            mimetype = "text/html",
                            name = "HyperText Markup Language (HTML)"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.AccountDevice", b =>
                {
                    b.HasOne("Core.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Domain.Entities.AccountProfile", b =>
                {
                    b.HasOne("Core.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Domain.Entities.Clipboard", b =>
                {
                    b.HasOne("Core.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.AccountDevice", "AccountDevice")
                        .WithMany()
                        .HasForeignKey("device_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("type_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AccountDevice");

                    b.Navigation("ContentType");
                });
#pragma warning restore 612, 618
        }
    }
}
